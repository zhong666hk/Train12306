package com.wbu.train.generator.ftl;

import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.date.DateTime;
import cn.hutool.core.date.DateUtil;
import cn.hutool.core.util.ObjectUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.wbu.train.common.context.LoginMemberContext;
import com.wbu.train.common.util.SnowUtil;
import com.wbu.train.${doMain}.domain.${DoMain};
import com.wbu.train.${doMain}.mapper.${DoMain}Mapper;
import com.wbu.train.${doMain}.req.${DoMain}QueryReq;
import com.wbu.train.${doMain}.req.${DoMain}SaveReq;
import com.wbu.train.${doMain}.resp.${DoMain}QueryResp;
import com.wbu.train.${doMain}.service.${DoMain}Service;
import org.springframework.stereotype.Service;

import java.util.Date;

/**
 * @author 钟正保
 * @description 针对表【${doMain}(乘车人)】的数据库操作Service实现
 * @createDate 2023-11-14 14:43:47
 */
@Service
public class ${DoMain}ServiceImpl extends ServiceImpl<${DoMain}Mapper, ${DoMain}>
        implements ${DoMain}Service {

    @Override
    public boolean save${DoMain}(${DoMain}SaveReq req) {
        DateTime date = DateUtil.date(); // hutool的是已经格式化了的
        if (ObjectUtil.isNull(req)) {
            return false;
        }
        // 拷贝类
        ${DoMain} ${doMain} = BeanUtil.copyProperties(req, ${DoMain}.class);
        // 如果是id为空--->说明是添加的操作
        if (ObjectUtil.isNull(${doMain}.getId())){
            ${doMain}.setId(SnowUtil.getSnowflakeNextId());
            ${doMain}.setCreateTime(date);
            ${doMain}.setUpdateTime(date);
            return this.save(${doMain});
        }// id不为空说明是修改的操作
        else {
            ${doMain}.setUpdateTime(date);
            return this.updateById(${doMain});
        }
    }

    @Override
    public Page<${DoMain}QueryResp> query${DoMain}s(${DoMain}QueryReq req) {
        // ObjectUtil.isNotNull(req)为空是管理员来查询所有的票
        QueryWrapper<${DoMain}> ${doMain}QueryWrapper = new QueryWrapper<>();
        //原理会对第一个sql进行拦截 添加limit
//        PageHelper.startPage( req.getPage(),req.getSize());
        Page<${DoMain}> page = this.page(new Page<>(req.getPage(), req.getSize()), ${doMain}QueryWrapper);
        Page<${DoMain}QueryResp> ${doMain}QueryRespPage = new Page<>();
        BeanUtil.copyProperties(page,${doMain}QueryRespPage);
        return ${doMain}QueryRespPage;
    }

    @Override
    public boolean deleteById(Long id) {
        if (ObjectUtil.isNull(id)){
            return false;
        }
        return this.removeById(id);
    }
}




